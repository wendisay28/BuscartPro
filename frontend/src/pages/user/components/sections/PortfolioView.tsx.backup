import { useState } from 'react';
import { Plus, Heart, MessageCircle, Clock, ShoppingBag as ShoppingCart, Briefcase, Image as ImageIcon, Video, Star } from 'lucide-react';
import { 
  services, 
  products, 
  photos, 
  portfolioTabs,
  type Service,
  type Product,
  type Photo,
  type TabItem 
} from '../../data/portfolio.mock';

// Definir tipos para los iconos
type IconType = React.ComponentType<{ className?: string }>;

const iconComponents: Record<string, IconType> = {
  Briefcase,
  ShoppingBag: ShoppingCart,
  Image: ImageIcon, // Usar el alias ImageIcon para evitar conflicto con HTMLImageElement
  Video,
  Star,
};

export function PortfolioView() {
  const [activeTab, setActiveTab] = useState<'services' | 'store' | 'photos' | 'videos' | 'featured'>('photos');

  // Renderizar contenido según la pestaña activa
  const renderTabIcon = (tab: TabItem) => {
    const IconComponent = iconComponents[tab.icon] || Briefcase;
    return <IconComponent className="w-5 h-5" />;
  };

  // Función para manejar el cambio de pestaña
  const handleTabChange = (tabId: string) => {
    setActiveTab(tabId as any);
  };

  const renderServiceCard = (service: Service) => (
    <div key={service.id} className="group bg-[#141b2a] rounded-xl overflow-hidden border border-gray-700 hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 flex flex-col h-full hover:border-blue-500/50">
      {/* Contenedor principal con altura fija */}
      <div className="flex flex-col h-[400px]">
        {/* Imagen con precio en esquina inferior derecha - 60% de altura */}
        <div className="relative h-[60%] overflow-hidden">
          <img 
            src={service.imageUrl} 
            alt={service.title}
            className="w-full h-full object-cover transition-transform duration-500 group-hover:scale-105"
          />
          {/* Precio con fondo azul transparente */}
          <div className="absolute bottom-3 right-3 bg-blue-600/90 backdrop-blur-sm text-white px-3 py-1 rounded-full transition-all duration-300 group-hover:bg-blue-500">
            <div className="relative">
              <span className="font-bold text-base tracking-wide relative z-10 drop-shadow-[0_2px_4px_rgba(30,64,175,0.5)]">
                ${service.price}
              </span>
              <span className="font-medium text-xs opacity-90 ml-0.5 relative z-10">
                COP
              </span>
              <div className="absolute inset-0 bg-blue-600/70 rounded-full blur-[2px] -z-0"></div>
            </div>
          </div>
        </div>
      
        {/* Contenido de la tarjeta - 40% de altura */}
        <div className="p-3 flex flex-col h-[40%] overflow-hidden">
          {/* Fila 1: Nombre del servicio con etiquetas */}
          <div className="flex flex-col space-y-1.5 mb-1.5">
            <h3 className="font-bold text-white text-[15px] leading-tight truncate">{service.title}</h3>
            
            {/* Etiquetas */}
            <div className="flex flex-wrap gap-1">
              {service.tags.slice(0, 3).map((tag: string, index: number) => (
                <span key={index} className="inline-flex items-center text-[10px] bg-blue-900/50 text-blue-200 px-2 py-0.5 rounded-full border border-blue-700/50">
                  {tag}
                </span>
              ))}
            </div>
          </div>
          
          {/* Fila 2: Breve descripción */}
          <p className="text-[12px] text-gray-300 line-clamp-2 mb-2.5 leading-tight">
            {service.description}
          </p>
          
          {/* Fila 3: Datos con iconos */}
          <div className="flex items-center justify-between text-gray-400 mt-auto pt-1.5 border-t border-gray-700">
            <div className="flex items-center space-x-4">
              <div className="flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-3.5 w-3.5 text-amber-400 fill-current" viewBox="0 0 20 20">
                  <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                </svg>
                <span className="text-[11px] font-medium text-white ml-0.5">{service.rating}</span>
                <span className="text-[10px] text-gray-400 ml-0.5">({service.reviews})</span>
              </div>
              
              <div className="flex items-center">
                <Clock className="h-3.5 w-3.5 text-blue-400" />
                <span className="text-[11px] text-gray-300 ml-1">{service.deliveryTime}</span>
              </div>
            </div>
            
            {/* Botón de Ver Detalles */}
            <button className="bg-[#e74f05] hover:bg-[#d14704] text-white text-xs font-medium py-1.5 px-4 rounded-lg transition-colors whitespace-nowrap hover:shadow-md hover:shadow-[#e74f05]/30">
              Ver Detalles
            </button>
          </div>
        </div>
      </div>
    </div>
  );

  const renderProductCard = (product: Product) => (
    <div key={product.id} className="group bg-white rounded-xl overflow-hidden shadow-sm hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1">
      <div className="relative pt-[120%] bg-gray-50 overflow-hidden">
        <img 
          src={product.imageUrl} 
          alt={product.title}
          className="absolute inset-0 w-full h-full object-cover transition-transform duration-500 group-hover:scale-105"
        />
        <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-end p-4">
          <div className="w-full">
            <div className="flex justify-between items-center mb-2">
              <span className="text-white font-semibold text-lg">{product.price}</span>
              <div className="flex space-x-2">
                <button className="bg-white/90 hover:bg-white text-gray-800 p-2 rounded-full transition-all duration-200 transform hover:scale-110">
                  <Heart className="w-4 h-4" />
                </button>
                <button className="bg-white/90 hover:bg-white text-gray-800 p-2 rounded-full transition-all duration-200 transform hover:scale-110">
                  <ShoppingCart className="w-4 h-4" />
                </button>
              </div>
            </div>
            <button className="w-full bg-[#e74f05] hover:bg-[#d14704] text-white text-sm font-medium py-2 px-4 rounded-lg transition-colors hover:shadow-md hover:shadow-[#e74f05]/30">
              Comprar ahora
            </button>
          </div>
        </div>
        <button className="absolute top-3 right-3 bg-white/90 hover:bg-white text-gray-800 p-1.5 rounded-full shadow-md opacity-0 group-hover:opacity-100 transition-opacity duration-200">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
            <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.793.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
          </svg>
        </button>
      </div>
      <div className="p-4">
        <div className="flex justify-between items-start mb-1">
          <h3 className="font-bold text-gray-800">{product.title}</h3>
          <div className="flex items-center text-amber-400">
            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 fill-current" viewBox="0 0 20 20">
              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
            </svg>
            <span className="text-xs text-gray-500 ml-1">4.8</span>
          </div>
        </div>
        <p className="text-sm text-gray-600 line-clamp-2">{product.description}</p>
        <div className="mt-2 flex justify-between items-center">
          <span className="text-xs text-gray-500">{product.likes} me gusta</span>
          <button className="text-xs text-gray-500 hover:text-orange-500 flex items-center">
            Ver detalles
            <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14 5l7 7m0 0l-7 7m7-7H3" />
            </svg>
          </button>
        </div>
      </div>
    </div>
  );

  const renderPhotoItem = (item: Photo) => (
    <div 
      key={item.id} 
      className="relative group overflow-hidden rounded-lg bg-white shadow-sm hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1"
    >
      <div className="relative pt-[133%] bg-gray-100">
        {/* Imagen con filtro de protección */}
        <div className="absolute inset-0 overflow-hidden">
          <img
            src={item.imageUrl}
            alt={`Portfolio item ${item.id}`}
            className="absolute inset-0 w-full h-full object-cover transition-transform duration-500 group-hover:scale-105"
          />
          
          {/* Filtro de protección */}
          <div className="absolute inset-0 bg-gradient-to-b from-transparent via-black/30 to-black/80" />
          
          {/* Marca de agua de protección */}
          <div className="absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300">
            <div className="absolute inset-0 bg-black/20 backdrop-blur-sm" />
            <div className="relative z-10 text-center p-4">
              <div className="text-white/80 text-xs font-mono tracking-widest transform -rotate-45 border border-white/30 p-2 rounded">
                IMAGEN PROTEGIDA
              </div>
            </div>
          </div>
        </div>
        
        {/* Controles de interacción */}
        <div className="absolute inset-0 flex items-end p-3 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
          <div className="w-full">
            <div className="flex justify-between items-center bg-black/60 backdrop-blur-sm rounded-full px-3 py-1.5">
              <div className="flex items-center text-white/90">
                <button className="p-1 hover:text-white transition-colors">
                  <Heart className="w-4 h-4" />
                </button>
                <span className="text-xs ml-1">{item.likes}</span>
              </div>
              <div className="flex items-center text-white/90">
                <button className="p-1 hover:text-white transition-colors">
                  <MessageCircle className="w-4 h-4" />
                </button>
                <span className="text-xs ml-1">{item.comments}</span>
              </div>
              <button className="text-white/70 hover:text-white p-1 transition-colors">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M6 10a2 2 0 11-4 0 2 2 0 014 0zM12 10a2 2 0 11-4 0 2 2 0 014 0zM16 12a2 2 0 100-4 2 2 0 000 4z" />
                </svg>
              </button>
            </div>
            
            <div className="mt-2 flex justify-between items-center">
              <button className="text-xs text-white/80 hover:text-white flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                </svg>
                Ver detalles
              </button>
              <button className="text-xs bg-[#e74f05] hover:bg-[#d14704] text-white px-3 py-1.5 rounded-full font-medium transition-colors">
                Descargar
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const renderContent = () => {
    switch (activeTab) {
      case 'services':
        return (
          <div className="space-y-4 p-2">
            <div className="flex justify-end px-2">
              <button className="flex items-center bg-[#e74f05] hover:bg-[#d14704] text-white text-sm font-medium py-2 px-4 rounded-lg transition-colors hover:shadow-md hover:shadow-[#e74f05]/30 hover:-translate-y-0.5">
                <Plus className="w-4 h-4 mr-1" />
                Agregar Servicio
              </button>
            </div>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
              {services.map((service: Service) => renderServiceCard(service))}
            </div>
          </div>
        );
        
      case 'store':
        return (
          <div className="space-y-4 p-2">
            <div className="flex justify-end px-2">
              <button className="flex items-center bg-[#e74f05] hover:bg-[#d14704] text-white text-sm font-medium py-2 px-4 rounded-lg transition-colors hover:shadow-md hover:shadow-[#e74f05]/30 hover:-translate-y-0.5">
                <Plus className="w-4 h-4 mr-1" />
                Agregar Producto
              </button>
            </div>
            <div className="grid grid-cols-2 sm:grid-cols-2 lg:grid-cols-3 gap-4">
              {products.map((product: Product) => renderProductCard(product))}
            </div>
          </div>
        );
        
      default: // 'photos', 'videos', 'featured'
        return (
          <div className="space-y-4 p-2">
            <div className="flex justify-end px-2">
              <button className="flex items-center bg-[#e74f05] hover:bg-[#d14704] text-white text-sm font-medium py-2 px-4 rounded-lg transition-colors hover:shadow-md hover:shadow-[#e74f05]/30 hover:-translate-y-0.5">
                <Plus className="w-4 h-4 mr-1" />
                Subir {activeTab === 'photos' ? 'Foto' : activeTab === 'videos' ? 'Vídeo' : 'Contenido'}
              </button>
            </div>
            <div className="grid grid-cols-3 gap-1 sm:gap-2">
              {photos.map((item: Photo) => renderPhotoItem(item))}
            </div>
          </div>
        );
    }
  };

  return (
    <div className="space-y-6 w-full">
      {/* Barra de navegación */}
      <div className="w-full border-b sticky top-0 bg-white z-10">
        <nav className="flex items-center w-full">
          <div className="flex justify-between w-full max-w-4xl mx-auto px-2">
            {portfolioTabs.map((tab: TabItem) => (
              <button
                key={tab.id}
                onClick={() => handleTabChange(tab.id)}
                className={`w-full flex items-center px-4 py-3 rounded-lg text-left transition-colors ${
                  activeTab === tab.id
                    ? 'bg-[#e74f05]/10 text-[#e74f05] font-medium'
                    : 'text-gray-700 hover:bg-gray-100'
                }`}
              >
                <span className="mr-3">{renderTabIcon(tab)}</span>
                {tab.label}
              </button>
            ))}
          </div>
        </nav>
      </div>

      {/* Contenido */}
      {renderContent()}
    </div>
  );
};
